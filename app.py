# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1knzWZLi5BvDnc_boCA4gDSwm-ps03Lp9
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Title of the app
st.title("Red Neuronal Artificial para Pronóstico")

# Upload the CSV file
uploaded_file = st.file_uploader("Sube el archivo CSV con los datos", type=["csv"])

if uploaded_file:
    # Load the CSV file
    data = pd.read_csv(uploaded_file)

    # Show the loaded data
    st.write("Datos cargados:")
    st.write(data)

    # Separate features (X) and target (Y)
    X = data.iloc[:, :-1]  # All columns except the last one (features)
    Y = data.iloc[:, -1]   # The last column (target)

    # Encode categorical variables if necessary
    if Y.dtype == 'object':
        label_encoder = LabelEncoder()
        Y = label_encoder.fit_transform(Y)

    # Scaling the features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Split the dataset into training and testing sets
    X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

    # Build the ANN model
    model = Sequential()
    model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='linear'))  # Output layer

    # Compile the model
    model.compile(loss='mean_squared_error', optimizer='adam')

    # Train the model
    model.fit(X_train, Y_train, epochs=100, batch_size=10, verbose=1)

    # Define user input questions
    st.write("Responde a las siguientes preguntas:")

    # Example questions (corresponding to features in your dataset)
    P6_1_1 = st.selectbox(
        "1. ¿Quién cree usted que debe ser responsable del cuidado de los hijos(as), de las personas enfermas y ancianas?",
        ("La mujer", "El hombre", "Ambos")
    )

    P6_1_2 = st.selectbox(
        "2. ¿Quién cree usted que debe ganar más salario en el trabajo?",
        ("La mujer", "El hombre", "Deben ganar lo mismo")
    )

    P6_1_3 = st.selectbox(
        "3. ¿Quién cree usted que debe ser el responsable de las tareas de la casa?",
        ("La mujer", "El hombre", "Ambos")
    )

    P6_1_4 = st.selectbox(
        "4. ¿Quién cree usted que debe ser el responsable de traer dinero para la casa?",
        ("La mujer", "El hombre", "Ambos")
    )

    P6_1_5 = st.selectbox(
        "5. ¿Quién cree usted que tiene mayor capacidad para trabajar y/o estudiar?",
        ("La mujer", "El hombre", "Ambos tienen la misma capacidad")
    )

    P6_2_1 = st.selectbox(
        "1. ¿Está usted de acuerdo en que hombres y mujeres tienen el mismo derecho a salir por las noches a divertirse?",
        ("Sí (de acuerdo)", "No (en desacuerdo)")
    )

    P6_2_2 = st.selectbox(
        "2. ¿Está usted de acuerdo en que las mujeres que tienen hijos(as) trabajen, aún si no tienen necesidad de hacerlo?",
        ("Sí (de acuerdo)", "No (en desacuerdo)")
    )

    # Example: map responses to numeric values (you can customize as per your data)
    responses = [
        1 if P6_1_1 == "La mujer" else 2 if P6_1_1 == "El hombre" else 3,
        1 if P6_1_2 == "La mujer" else 2 if P6_1_2 == "El hombre" else 3,
        1 if P6_1_3 == "La mujer" else 2 if P6_1_3 == "El hombre" else 3,
        1 if P6_1_4 == "La mujer" else 2 if P6_1_4 == "El hombre" else 3,
        1 if P6_1_5 == "La mujer" else 2 if P6_1_5 == "El hombre" else 3,
        1 if P6_2_1 == "Sí (de acuerdo)" else 2,
        1 if P6_2_2 == "Sí (de acuerdo)" else 2
    ]

    # Scale the user's input using the scaler
    input_data_scaled = scaler.transform([responses])

    # Make a prediction
    prediction = model.predict(input_data_scaled)

    # Display the prediction
    st.write(f"El pronóstico para Y es: {prediction[0][0]}")